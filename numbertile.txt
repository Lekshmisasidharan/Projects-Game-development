using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace GameProject
{
    /// <remarks>
    /// A number tile
    /// </remarks>
    class NumberTile
    {
        #region Fields

        // original length of each side of the tile
        int originalSideLength;
        float newSideLength;

        // whether or not this tile is the correct number
        bool isCorrectNumber;

        // drawing support
        Texture2D texture;
        Texture2D blinkingTileTexture;
        Texture2D currentTexture;
        Rectangle drawRectangle;
        Rectangle sourceRectangle;

        // blinking support
        const int TOTAL_BLINK_MILLISECONDS = 4000;
        int elapsedBlinkMilliseconds = 0;
        int elapsedFrameMilliseconds = 0;
        const int TOTAL_FRAME_MILLISECONDS = 200;

        //shrinking support
        const int TOTAL_SHRINK_MILLISECONDS = 2000;
        int elapsedShrinkMilliseconds = 0;       
         
        //fields for tile is visible,shrink,blink
        bool isTileVisible = true;
        bool isTileShrink = false;
        bool isTileBlink = false;

        //click support
        bool clickStarted;
        bool buttonReleased;

        //sound
        SoundBank sound;

        #endregion


        #region Constructors

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="contentManager">the content manager</param>
        /// <param name="center">the center of the tile</param>
        /// <param name="sideLength">the side length for the tile</param>
        /// <param name="number">the number for the tile</param>
        /// <param name="correctNumber">the correct number</param>
        /// <param name="soundBank">the sound bank for playing cues</param>
        public NumberTile(ContentManager contentManager, Vector2 center, int sideLength,
            int number, int correctNumber, SoundBank soundBank)
        {
            // set original side length field
            this.originalSideLength = sideLength;

            // set sound bank field
            sound = soundBank;
            
            // load content for the tile and create draw rectangle
            LoadContent(contentManager, number);
            drawRectangle = new Rectangle((int)center.X- sideLength/2,(int)center.Y-sideLength/2,
                sideLength,sideLength);

            // set isCorrectNumber flag
            isCorrectNumber = number == correctNumber;
        }

        #endregion
       
        #region Public methods

        /// <summary>
        /// Updates the tile based on game time and mouse state
        /// </summary>
        /// <param name="gameTime">the current GameTime</param>
        /// <param name="mouse">the current mouse state</param>
        /// <return>true if the correct number was guessed, false otherwise</return>
              
        //
        public bool Update(GameTime gameTime, MouseState mouse)
        {         
            //if correct tile make it blink
            if (isTileBlink)
            {
                elapsedBlinkMilliseconds = elapsedBlinkMilliseconds + gameTime.ElapsedGameTime.Milliseconds;
                if (elapsedBlinkMilliseconds < TOTAL_BLINK_MILLISECONDS)
                {
                    //change the frames in blinking annimation
                    elapsedFrameMilliseconds = elapsedFrameMilliseconds + gameTime.ElapsedGameTime.Milliseconds;
                    if (elapsedFrameMilliseconds > TOTAL_FRAME_MILLISECONDS)
                    {
                        if (sourceRectangle.X == currentTexture.Width / 2)
                        {
                            sourceRectangle.X = 0;
                        }
                        else if (sourceRectangle.X == 0)
                        {
                            sourceRectangle.X = currentTexture.Width / 2;
                        }
                        elapsedFrameMilliseconds = 0;                    
                    }                   
                }
                else
                {                                   
                    return true;
                }                     
            }

            else if (isTileShrink)
            {
                elapsedShrinkMilliseconds = elapsedShrinkMilliseconds + gameTime.ElapsedGameTime.Milliseconds;
                newSideLength = originalSideLength * ((TOTAL_SHRINK_MILLISECONDS - elapsedShrinkMilliseconds)
                    / (float)TOTAL_SHRINK_MILLISECONDS);

                //if newsidelength > 0 set width&height
                //of drawrectangle to newsidelength
                if (newSideLength > 0)
                {
                    drawRectangle.Width = (int)newSideLength;
                    drawRectangle.Height = (int)newSideLength;
                }
                else
                {
                    isTileVisible = false;
                }                   
            }
            else
            {
                //detect mouse clicks
                if (drawRectangle.Contains(mouse.X, mouse.Y))
                {
                    sourceRectangle.X = texture.Width / 2;
                    if (mouse.LeftButton == ButtonState.Pressed && buttonReleased)
                    {
                        clickStarted = true;
                        buttonReleased = false;
                    }
                    else if (mouse.LeftButton == ButtonState.Released)
                    {
                        buttonReleased = true;
                        if (clickStarted)
                        {
                            //if it is correct number tile blinks and play sound
                            if (isCorrectNumber)
                            {
                                isTileBlink = true;
                                sound.PlayCue("correctGuess");
                                currentTexture = blinkingTileTexture;
                                sourceRectangle.X = 0;
                            }
                            else
                            {
                                isTileShrink = true;
                                sound.PlayCue("incorrectGuess");
                            }
                            clickStarted = false;
                        }
                    }
                }

                //return true;
                else
                {
                    sourceRectangle.X = 0;
                }

            }
    
            // if we get here, return false       
            return false;        
        }

        /// <summary>
        /// Draws the number tile
        /// </summary>
        /// <param name="spriteBatch">the SpriteBatch to use for the drawing</param>
        public void Draw(SpriteBatch spriteBatch)
        {
            // draw the tile
            if (isTileVisible)
            {
                spriteBatch.Draw(currentTexture, drawRectangle,sourceRectangle, Color.White);
            }
        }
        

        #endregion

        #region Private methods

        /// <summary>
        /// Loads the content for the tile
        /// </summary>
        /// <param name="contentManager">the content manager</param>
        /// <param name="number">the tile number</param>
        private void LoadContent(ContentManager contentManager, int number)
        {
            // convert the number to a string
            string numberString = ConvertIntToString(number);
            string tileString = ConvertIntToString(number);
            
            // load content for the tile and set source rectangle      
            texture = contentManager.Load<Texture2D>(numberString);           
            blinkingTileTexture = contentManager.Load<Texture2D>("blinking"+tileString);
            currentTexture = texture;
            sourceRectangle = new Rectangle(0, 0, currentTexture.Width/2, currentTexture.Height);
        }

        /// <summary>
        /// Converts an integer to a string for the corresponding number
        /// </summary>
        /// <param name="number">the integer to convert</param>
        /// <returns>the string for the corresponding number</returns>
        private String ConvertIntToString(int number)
        {
            switch (number)
            {
                case 1:
                    return "one";
                case 2:
                    return "two";
                case 3:
                    return "three";
                case 4:
                    return "four";
                case 5:
                    return "five";
                case 6:
                    return "six";
                case 7:
                    return "seven";
                case 8:
                    return "eight";
                case 9:
                    return "nine";
                default:
                    throw new Exception("Unsupported number for number tile");
            }

        }

        #endregion
    }
}
